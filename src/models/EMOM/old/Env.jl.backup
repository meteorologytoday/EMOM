mutable struct Env

    gf_filename :: Union{AbstractString, Nothing}
    cdata_filename :: Union{AbstractString, Nothing}  # Cyclic data filename

    sub_yrng    :: Any
    Nx :: Integer
    Ny :: Integer
    Nz :: Integer

    z_w      :: AbstractArray{Float64, 1} # Unmasked zs bone

    Ks_H      :: Float64
    Ks_V      :: Float64
    Ks_V_cva  :: Float64

    R         :: Float64   # Fast absorption portion of sunlight.
    ζ1        :: Float64   # Light penetration depth of DO ( = ζ2 in Paulson and Simpson (1977) )
    ζ2        :: Float64   # Light penetration depth of DO ( = ζ2 in Paulson and Simpson (1977) )

    ϵ         :: Float64

    τ_TEMP    :: Union{Float64, Nothing}
    τ_SALT    :: Union{Float64, Nothing}

    Ekman_layers :: Integer
    Returnflow_layers :: Integer

    function Env(;
        gf_filename :: AbstractString,
        cdata_filename :: String = "",
        sub_yrng :: Union{UnitRange, Nothing} = nothing,
        z_w      :: AbstractArray{Float64, 1},
        Ks_H     :: Float64 = 1e3,
        Ks_V     :: Float64 = 1e-5,
        Ks_V_cva :: Float64 = 1.0,
        τ_TEMP   :: Union{Float64, Nothing} = nothing,
        τ_SALT   :: Union{Float64, Nothing} = nothing,
        ϵ        :: Union{AbstractArray{Float64, 2}, Float64, Nothing} = 1.0 / 86400.0,
        R        :: Float64 = 0.58,
        ζ1       :: Float64 = 0.35,
        ζ2       :: Float64 = 23.0,
        Ekman_layers      :: Integer = 1,
        Returnflow_layers :: Integer = 1,
        verbose  :: Bool = false,
    )
        
        # ===== [BEG] GridInfo =====

        # mask =>   lnd = 0, ocn = 1
        gf = PolelikeCoordinate.CurvilinearSphericalGridFile(
            gf_filename;
            R  = 6371229.0,
            Ω  = 2π / (86400 / (1 + 365/365)),
        )

        Nx = gf.Nx
        Ny = (sub_yrng == nothing) ? gf.Ny : length(sub_yrng)
        Nz = length(z_w) - 1

            #gd      = PolelikeCoordinate.genGrid(gf, z_w ; sub_yrng=sub_yrng) 
            #gd_slab = PolelikeCoordinate.genGrid(gf, [0, -1.0]; sub_yrng=sub_yrng) 

        #mask_sT = reshape(gf.mask, 1, size(gf.mask)...)
        #mask_T  = repeat( mask_sT, outer=(gd.Nz, gd.Nx, gd.Ny) )
        

        return new(
            
            gf_filename,
            cdata_filename,
 
            sub_yrng,        
            Nx,
            Ny,
            Nz,

            z_w,

            Ks_H,
            Ks_V,
            Ks_V_cva,

            R,
            ζ1,
            ζ2,

            ϵ,

            τ_TEMP,
            τ_SALT,
        
            Ekman_layers,
            Returnflow_layers,
        )
    end

end


