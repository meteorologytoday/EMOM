using NCDatasets
using Distributed
using SharedArrays
using Formatting

var = ARGS[1]
ens = parse(Int, ARGS[2])



varname = var
s_map_file = format("b.e11.B1850C5CN.f09_g16.{:03d}.pop.h.{}.050001-059912.nc", ens, varname)
wgt_file = "wgt_gx1v6_to_gx3v7.nc"
d_file = format("LENS_B1850C5CN_{:03d}_gx3v7_{}.nc", ens, varname)

ds_w = Dataset(wgt_file, "r")
ds_s = Dataset(s_map_file, "r")
ds_d = Dataset(d_file, "c")

missing_value = 1e20


NN_idx = convert(Array{Integer}, nomissing(ds_w["NN_idx"][:], 0))
NNN = size(NN_idx)[1]

d_Nt = ds_s.dim["time"]
d_Nx = ds_w.dim["d_Nx"]
d_Ny = ds_w.dim["d_Ny"]
d_Nz = ds_s.dim["z_t"]

d_N = d_Nx * d_Ny

defDim(ds_d, "Nx", d_Nx)
defDim(ds_d, "Ny", d_Ny)
defDim(ds_d, "Nz", d_Nz)
defDim(ds_d, "time", Inf)

# Write horizontal grid information
for (varname, vardata, dims) in (
    ("lat", ds_w["d_lat"][:], ("Nx", "Ny",)),
    ("lon", ds_w["d_lon"][:], ("Nx", "Ny",)),
    ("z_w_top", ds_s["z_w_top"][:], ("Nz",)),
    ("z_w_bot", ds_s["z_w_bot"][:], ("Nz",)),
)
    println("varname: ", varname)
    v = defVar(ds_d, varname, Float64, dims)
    v.attrib["_FillValue"] = missing_value
    v[:] = vardata
end

# Write vertical grid information


println("NNN: ", NNN)



d_var = defVar(ds_d, varname, Float64, ("Nx", "Ny", "Nz", "time"))
d_var.attrib["_FillValue"] = missing_value

@time @sync @distributed for t = 1 : d_Nt
    print(format("\rProcgress: {:.2f}% ({:d} / {:d})", t / d_Nt * 100.0, t, d_Nt))

    d_data = zeros(Float64, d_Nx, d_Ny) # do it layer by layer
    
    for k = 1:d_Nz
        d_data .= 0.0
        s_data = reshape(nomissing(ds_s[varname][:, :, k, t], NaN), :)
        
        for i = 1 : length(d_data)
            if NN_idx[1, i] == 0
                d_data[i] = missing_value
                continue
            end

            for j = 1:NNN
                d_data[i] += s_data[NN_idx[j, i]]
            end
            d_data[i] /= NNN
        end

        d_var[:, :, k, t] = d_data
    end
end
println("done.")

close(ds_w)
close(ds_s)
close(ds_d)



